package views;

        import javafx.application.Platform;
        import javafx.collections.FXCollections;
        import javafx.collections.ObservableList;
        import javafx.event.ActionEvent;
        import javafx.fxml.FXML;
        import javafx.scene.chart.PieChart;
        import javafx.scene.control.*;
        import javafx.scene.input.MouseEvent;

        import java.io.FileWriter;
        import java.io.IOException;
        import java.time.LocalDate;
        import java.time.LocalTime;
        import java.time.format.DateTimeFormatter;
        import java.util.HashMap;
        import java.util.Map;
        import java.util.Timer;
        import java.util.TimerTask;

        public class MenaxhimiNotaveController {

        @FXML
        private TextField txtKerkim, txtStudenti, txtLenda, txtNota, txtViti, txtPeriudha;
        @FXML
        private DatePicker datePicker;
        @FXML
        private ListView<String> listaNotave;
    @FXML
    private Label lblMesatarja, lblNumriNotave, lblStudentiMeNotaMeTeLarta, lblPeriudha;
    @FXML
    private PieChart pieChart;

    // Lista që do të përmbajë notat dhe statistikat
    private ObservableList<String> notat = FXCollections.observableArrayList();
        private Map<String, Integer> statistika = new HashMap<>();

            @FXML
            public void initialize() {
            // Orë dhe Datë që përditësohen automatikisht
            startClock();
            // Vendos listën e notave në ListView
            listaNotave.setItems(notat);
            // Inicimi i PieChart
            pieChart.setTitle("Statistikat e Notave");
            }

            @FXML
            private void regjistroNota(ActionEvent actionEvent) {
            String emri = txtStudenti.getText();
            String lenda = txtLenda.getText();
            String nota = txtNota.getText();
            String viti = txtViti.getText();
            String periudha = txtPeriudha.getText();
            LocalDate data = datePicker.getValue();

            if (!emri.isEmpty() && data != null && !nota.isEmpty() && (periudha.equals("1") || periudha.equals("2"))) {
            String raport = "Nxënësi: " + emri + " | Lënda: " + lenda + " | Nota: " + nota + " | Viti: " + viti + " | Periudha: " + periudha + " | Data: " + data;
            notat.add(raport);
            listaNotave.setItems(notat);

            // Përditëso statistikat
            int notaVlera = Integer.parseInt(nota);
            statistika.put(emri, statistika.getOrDefault(emri, 0) + notaVlera);
            lblNumriNotave.setText("Total Nota: " + notat.size());
            updateChart();

            // Gjetja e nxënësit me notat më të larta
            String maxStudent = statistika.entrySet().stream()
            .max(Map.Entry.comparingByValue())
            .map(Map.Entry::getKey)
            .orElse("-");
            lblStudentiMeNotaMeTeLarta.setText("Nxënësi me notat më të larta: " + maxStudent);

            pastroFushat();
            } else {
            showError("Ju lutem plotësoni të gjitha fushat, datën dhe periudha duhet të jetë 1 ose 2!");
            }
            }

            @FXML
            private void pastroFushat() {
            txtStudenti.clear();
            txtLenda.clear();
            txtNota.clear();
            txtViti.clear();
            txtPeriudha.clear();
            datePicker.setValue(null);
            }

            private void showError(String message) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Gabim");
            alert.setHeaderText(null);
            alert.setContentText(message);
            alert.showAndWait();
            }

            // Metoda për të përditësuar grafikun
            private void updateChart() {
            ObservableList<PieChart.Data> chartData = FXCollections.observableArrayList();
                for (Map.Entry<String, Integer> entry : statistika.entrySet()) {
                chartData.add(new PieChart.Data(entry.getKey(), entry.getValue()));
                }
                pieChart.setData(chartData);
                }

                // Metoda për të përditësuar orën dhe datën
                private void startClock() {
                Timer timer = new Timer();
                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

                timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                Platform.runLater(() -> {
                lblMesatarja.setText("Ora: " + LocalTime.now().format(timeFormatter));
                });
                }
                }, 0, 1000);
                }
                }
                ""

