package controllers;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.input.KeyEvent;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class NotatController {

    @FXML
    private TextField txtEmriNxenesit;

    @FXML
    private TextField txtLenda;

    @FXML
    private ComboBox<String> comboPeriudha;

    @FXML
    private TextField nota1;

    @FXML
    private TextField nota2;

    @FXML
    private TextField nota3;

    @FXML
    private TextField txtMesuesi;

    @FXML
    private Label lblMesatarja;

    @FXML
    private Label lblNotaFinale;

    @FXML
    private Label lblDataOra1;

    @FXML
    private Label lblDataOra2;

    @FXML
    private Label lblDataOra3;

    @FXML
    private ListView<String> listaNotave;

    private ObservableList<String> notat = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        listaNotave.setItems(notat);
        comboPeriudha.setItems(FXCollections.observableArrayList("1", "2"));
    }

    @FXML
    private void onKeyReleasedNota1(KeyEvent event) {
        if (!nota1.getText().isEmpty()) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            LocalDateTime now = LocalDateTime.now();
            lblDataOra1.setText("Nota 1 u vendos më: " + dtf.format(now));
        }
    }

    @FXML
    private void onKeyReleasedNota2(KeyEvent event) {
        if (!nota2.getText().isEmpty()) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            LocalDateTime now = LocalDateTime.now();
            lblDataOra2.setText("Nota 2 u vendos më: " + dtf.format(now));
        }
    }

    @FXML
    private void onKeyReleasedNota3(KeyEvent event) {
        if (!nota3.getText().isEmpty()) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            LocalDateTime now = LocalDateTime.now();
            lblDataOra3.setText("Nota 3 u vendos më: " + dtf.format(now));
        }
    }

    @FXML
    private void llogaritMesataren() {
        try {
            double n1 = Double.parseDouble(nota1.getText());
            double n2 = Double.parseDouble(nota2.getText());
            double n3 = Double.parseDouble(nota3.getText());

            double mesatarja = (n1 + n2 + n3) / 3;
            mesatarja = Math.round(mesatarja * 100.0) / 100.0;

            lblMesatarja.setText("Mesatarja: " + mesatarja);

            int notaFinale = (int) Math.round(mesatarja);
            lblNotaFinale.setText("Nota Finale: " + notaFinale);

        } catch (NumberFormatException e) {
            lblMesatarja.setText("Gabim në formatin e notave!");
            lblNotaFinale.setText("-");
        }
    }

    @FXML
    private void pastroFushat() {
        txtEmriNxenesit.clear();
        txtLenda.clear();
        nota1.clear();
        nota2.clear();
        nota3.clear();
        txtMesuesi.clear();
        comboPeriudha.getSelectionModel().clearSelection();
        lblDataOra1.setText("");
        lblDataOra2.setText("");
        lblDataOra3.setText("");
        lblMesatarja.setText("");
        lblNotaFinale.setText("");
    }

    public void regjistroNota(ActionEvent actionEvent) {
    }
}
